#!/usr/bin/env bash

# shellcheck disable=SC2155

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*${color:+\e[0m}" >&2; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*${color:+\e[0m}"; }
info() { echo -e "${color:+\e[37m}[*] $*${color:+\e[0m}"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return "$shift"
}
subinfo() { echo -e "${color:+\e[36m}[=] $*${color:+\e[0m}"; }
warn() { echo -e "${color:+\e[33m}[-] $*${color:+\e[0m}"; }
### Helpers end

example() {
    cat <<EOF
{
  "obfsproxy": [
    {
      "from": "0.0.0.0:522",
      "to": "192.168.1.15:443"
    },
    {
      "from": "0.0.0.0:728",
      "to": "192.168.1.15:443"
    }
  ],
  "openvpn": [
    {
      "clients": [
        "user1",
        "user2"
      ],
      "dns": "10.0.1.1",
      "endpoint": "vpn.your.tld",
      "iface": "eth0",
      "pool": "10.0.1.0/255.255.255.0",
      "port": "443/tcp",
      "routes": [
        "192.168.0.0/255.255.0.0"
      ]
    },
    {
      "clients": [
        "user1",
        "user2"
      ],
      "dns": "10.0.2.1",
      "endpoint": "vpn.your.tld",
      "iface": "eth0",
      "pool": "10.0.2.0/255.255.255.0",
      "port": "5353/udp",
      "routes": [
        "192.168.0.0/255.255.0.0"
      ]
    }
  ],
  "wireguard": {
    "wg0": {
      "clients": [
        {
          "ip": "10.0.3.2",
          "name": "user1"
        },
        {
          "ip": "10.0.3.3",
          "name": "user2"
        }
      ],
      "dns": "10.0.3.1",
      "endpoint": "vpn.your.tld",
      "ip": "10.0.3.1/24",
      "port": 443,
      "#routes": "If nothing provided, all traffic goes thru tunnel",
      "routes": [
        "192.168.0.0/16"
      ]
    }
  }
}
EOF
}

gen_iptables() {
    local line
    local port
    local ssh="$(awk '/^#?Port\s/ {print $2}' /etc/ssh/sshd_config)"

    cat <<EOF
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
:HARDPASS - [0:0]
:SYNFLOOD - [0:0]
:TCP - [0:0]
:UDP - [0:0]
# Allow loopback
-A INPUT -i lo -j ACCEPT
# Allow established
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
# Drop invalid
-A INPUT -m conntrack --ctstate INVALID -j DROP
# Allow ping
-A INPUT -p icmp -m icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT
# Jump to tcp table for new tcp
-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m conntrack --ctstate NEW -j TCP
# Jump to udp table for new udp
-A INPUT -p udp -m conntrack --ctstate NEW -j UDP
# Otherwise reject
-A INPUT -j HARDPASS
# Allow established
-A FORWARD -m conntrack --ctstate DNAT,ESTABLISHED,RELATED -j ACCEPT
# Drop invalid
-A FORWARD -m conntrack --ctstate INVALID -j DROP
# Reject forwarding that is coming in and out the same interface
-A FORWARD -i eth+ -o eth+ -j HARDPASS
-A FORWARD -i tun+ -o tun+ -j HARDPASS
-A FORWARD -i wg+ -o wg+ -j HARDPASS
# Delete these next two if you're planning on using an upstream VPN
-A FORWARD -i tun+ -o wg+ -j HARDPASS
-A FORWARD -i wg+ -o tun+ -j HARDPASS
# Forwarding rule for use as a direct gateway
-A FORWARD -i eth+ -j ACCEPT
# Forwarding rule for use as an OpenVPN gateway
-A FORWARD -i tun+ -j ACCEPT
# Forwarding rule for use as a Wireguard gateway
-A FORWARD -i wg+ -j ACCEPT
# Otherwise reject
-A FORWARD -j HARDPASS
-A HARDPASS -p tcp -j REJECT --reject-with tcp-reset
-A HARDPASS -p udp -j REJECT --reject-with icmp-port-unreachable
-A HARDPASS -j REJECT --reject-with icmp-proto-unreachable
# Protect from SYN flood
-A SYNFLOOD -m limit --limit 64/min --limit-burst 64 -j RETURN
-A SYNFLOOD -j HARDPASS
# Check for SYN flood
-A TCP -j SYNFLOOD
# Allow TCP ports
$(
    unset ports
    declare -a ports

    # shellcheck disable=SC2030
    [[ -z $ssh ]] || ports+=("$ssh")
    ports+=("53")

    if [[ -n $(json_get "obfsproxy") ]]; then
        while read -r port; do
            ports+=("${port##*:}")
        done < <(json_get "obfsproxy[]|.from"); unset port
    fi

    if [[ -n $(json_get "openvpn") ]]; then
        while read -r line; do
            port="$(json_get "port" "$line")"
            case "${port##*/}" in
                "tcp") ports+=("${port%%/*}") ;;
            esac
        done < <(json_get "openvpn[]"); unset line

    fi

    if [[ ${#ports[@]} -gt 0 ]]; then
        cat <<EOL
-A TCP -p tcp -m multiport --dports $(join "," ${ports[@]}) -j ACCEPT
EOL
    fi
)
# Allow UDP ports
$(
    unset ports
    declare -a ports

    # shellcheck disable=SC2031
    ports+=("53")

    if [[ -n $(json_get "openvpn") ]]; then
        while read -r line; do
            port="$(json_get "port" "$line")"
            case "${port##*/}" in
                "udp") ports+=("${port%%/*}") ;;
            esac
        done < <(json_get "openvpn[]"); unset line

    fi

    if [[ -n $(json_get "wireguard") ]]; then
        while read -r port; do
            ports+=("$port")
        done < <(json_get "wireguard[]|.port"); unset port
    fi

    if [[ ${#ports[@]} -gt 0 ]]; then
        cat <<EOL
-A UDP -p udp -m multiport --dports $(join "," ${ports[@]}) -j ACCEPT
EOL
    fi
)
COMMIT
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
# Masquerade for OpenVPN and Wireguard (may need to adjust eth+)
-A POSTROUTING -o eth+ -j MASQUERADE
# Uncomment the next line if using an upstream VPN
#-A POSTROUTING -o tun+ -j MASQUERADE
COMMIT
*raw
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A PREROUTING -m rpfilter -j ACCEPT
-A PREROUTING -j DROP
COMMIT
EOF
}

join() { local IFS="$1"; shift; echo "$*"; }

json_get() {
    if [[ $# -eq 1 ]]; then
        jq -cMrS ".$1" "$conf" | sed -r "s/^null$//"
    elif [[ $# -eq 2 ]]; then
        jq -cMrS ".$1" <<<"$2" | sed -r "s/^null$//"
    fi
}

openvpn_gen_client() {
    local client="$1"
    local config="$2"
    local endpoint="$(json_get "endpoint" "$config")"
    local port="$(json_get "port" "$config")"
    local proto="$(json_get "port" "$config")"
    local srv
    local tmp

    port="${port%%/*}"
    proto="${proto##*/}"
    srv="$proto$port"
    tmp="${client}_$srv"

    file="/etc/openvpn/clients/$tmp.ovpn"

    if [[ -f $file ]] && [[ -z $force ]]; then
        warn "Client $tmp already exists. Use --force to overwrite."
        return
    fi

    subinfo "Generating OpenVPN client: $tmp"

    mkdir -p /etc/openvpn/clients

    certify -c "$client" -p /etc/openvpn/pki

    cat >"$file" <<EOF
<ca>
$(cat /etc/openvpn/pki/ca/ca.cert.pem)
</ca>
<cert>
$(cat "/etc/openvpn/pki/certs/$client.cert.pem")
</cert>
client
dev tun
group nobody
<key>
$(cat "/etc/openvpn/pki/private/$client.key.pem")
</key>
key-direction 1
mute-replay-warnings
nobind
persist-key
persist-tun
proto $proto
remote $endpoint $port
remote-cert-tls server
resolv-retry infinite
<tls-auth>
$(cat "/etc/openvpn/ta/$srv.key")
</tls-auth>
user nobody
verb 3
EOF

    chown -R root:root /etc/openvpn
    chmod -R u+rwX,go-rwx /etc/openvpn
}

openvpn_gen_server() {
    local config="$1"
    local dns="$(json_get "dns" "$config")"
    local endpoint="$(json_get "endpoint" "$config")"
    local iface="$(json_get "iface" "$config")"
    local ip
    local max="$(json_get "clients|length" "$config")"
    local pool="$(json_get "pool" "$config")"
    local pool_ip="${pool%%/*}"
    local pool_mask="${pool##*/}"
    local port="$(json_get "port" "$config")"
    local proto="$(json_get "port" "$config")"
    local route
    local -a routes
    local srv

    port="${port%%/*}"
    proto="${proto##*/}"
    srv="$proto$port"

    if [[ -f /etc/openvpn/$srv.conf ]] && [[ -z $force ]]; then
        warn "Server $srv already exists. Use --force to overwrite."
        return
    fi

    subinfo "Generating OpenVPN server:$srv"

    ip="$(
        ip -o a show dev "$iface" | grep -im 1 -oPs "inet\s+\K[^/]+"
    )"

    while read -r route; do
        routes+=("$route")
    done < <(json_get "routes[]" "$config"); unset route

    mkdir -p /etc/openvpn/{dh,ipp,pki,ta}

    # Create DH params
    openssl dhparam -out /etc/openvpn/dh/dh2048.pem 2048

    # Create CA
    certify -p /etc/openvpn/pki "$endpoint"

    if [[ ! -f /etc/openvpn/ta/$srv.key ]]; then
        openvpn --genkey secret "/etc/openvpn/ta/$srv.key"
    fi

    cat >"/etc/openvpn/$srv.conf" <<EOF
ca /etc/openvpn/pki/ca/ca.cert.pem
cert /etc/openvpn/pki/certs/$endpoint.cert.pem
dev tun
dh /etc/openvpn/dh/dh2048.pem
$([[ "$proto" == "udp" ]] || echo -n "#")explicit-exit-notify 1
group nobody
ifconfig-pool-persist /etc/openvpn/ipp/$srv.txt
keepalive 32 128
key /etc/openvpn/pki/private/$endpoint.key.pem
local $ip
log-append /var/log/openvpn.log
max-clients $max
persist-key
persist-tun
port $port
proto $proto
${dns:+push \"dhcp-option DNS $dns\"}
$(
    for route in "${routes[@]}"; do
        echo "push \"route ${route%%/*} ${route##*/}\""
    done; unset route
)
server $pool_ip $pool_mask
status /var/log/openvpn-status.log
tls-auth /etc/openvpn/ta/$srv.key 0
topology subnet
user nobody
verb 3
EOF

    chown -R root:root /etc/openvpn
    chmod -R u+rwX,go-rwx /etc/openvpn

    ln -fs /etc/init.d/openvpn "/etc/init.d/openvpn.$srv"
}

qr() {
    local client="$2"
    local file
    local iface="$1"
    local port="$(json_get "wireguard.$iface.port")"

    [[ -n $port ]] || return

    file="/etc/wireguard/$iface/${client}$port.conf"
    if [[ -f "$file" ]]; then
        info "Full tunnel:"
        qrencode -r "$file" -t ansiutf8
    fi

    file="/etc/wireguard/$iface/${client}${port}split.conf"
    if [[ -f "$file" ]]; then
        info "Split tunnel:"
        qrencode -r "$file" -t ansiutf8
    fi
}

rebuild() {
    local iface
    local line

    if [[ ! -f /etc/openvpn/pki/.cfg ]]; then
        mkdir -p /etc/openvpn/pki
        cat >/etc/openvpn/pki/.cfg <<EOF
cacn = Alpine VPN Framework CA
cadays = 3650
certdays = 3650
EOF
    fi

    # Setup OpenVPN
    if [[ -n $(json_get "openvpn") ]]; then
        while read -r line; do
            setup_openvpn "$line"
        done < <(json_get "openvpn[]"); unset line
    fi

    # Setup Wireguard
    if [[ -n $(json_get "wireguard") ]]; then
        while read -r iface; do
            setup_wireguard "$iface" "$(json_get "wireguard.$iface")"
        done < <(json_get "wireguard|keys[]"); unset iface
    fi
}

setup_openvpn() {
    local client
    local config="$1"

    # Setup OpenVPN server
    openvpn_gen_server "$config"

    # Setup OpenVPN clients
    while read -r client; do
        openvpn_gen_client "$client" "$config"
    done < <(json_get "clients[]" "$config"); unset client
}

setup_wireguard() {
    local client
    local config="$2"
    local iface="$1"
    local ip
    local name

    # Setup Wireguard server
    wg_gen_server "$config" "$iface"

    # Setup Wireguard clients
    while read -r client; do
        ip="$(json_get "ip" "$client")"
        name="$(json_get "name" "$client")"
        wg_gen_client "$config" "$iface" "$ip" "$name"
    done < <(json_get "clients[]" "$config"); unset client
}

start() {
    local line
    local port
    local srv

    case "$(rc-service local status)" in
        *"started"*) rc-service local stop ;;
    esac

    cat >/etc/local.d/obfs3proxy.start <<EOF
#!/usr/bin/env bash

[[ -f "$HOME/.local/bin/obfsproxy" ]] || exit

json_get() {
    if [[ \$# -eq 1 ]]; then
        jq -cMrS ".\$1" "$conf" | sed -r "s/^null$//"
    elif [[ \$# -eq 2 ]]; then
        jq -cMrS ".\$1" <<<"\$2" | sed -r "s/^null$//"
    fi
}

if [[ -n \$(json_get "obfsproxy") ]]; then
    while read -r line; do
        from="\$(json_get "from" "\$line")"
        to="\$(json_get "to" "\$line")"
        "$HOME/.local/bin/obfsproxy" --no-log obfs3 --dest "\$to" \\
            server "\$from" &
    done < <(json_get "obfsproxy[]"); unset line
fi
EOF

    cat >/etc/local.d/obfs3proxy.stop <<EOF
#!/usr/bin/env bash

pkill -f obfspoxy
EOF

    chmod 755 /etc/local.d/obfs3proxy.{start,stop}

    cat >/etc/local.d/wireguard.start <<EOF
#!/usr/bin/env bash

json_get() { jq -cMrS ".\$1" "$conf" | sed -r "s/^null$//"; }

if [[ -n \$(json_get "wireguard") ]]; then
    while read -r iface; do
        wg-quick up \$iface
    done < <(json_get "wireguard|keys[]"); unset iface
fi
EOF

    cat >/etc/local.d/wireguard.stop <<EOF
#!/usr/bin/env bash

json_get() { jq -cMrS ".\$1" "$conf" | sed -r "s/^null$//"; }

if [[ -n \$(json_get "wireguard") ]]; then
    while read -r iface; do
        wg-quick down \$iface
    done < <(json_get "wireguard|keys[]"); unset iface
fi
EOF

    chmod 755 /etc/local.d/wireguard.{start,stop}

    case "$(rc-update show | grep "local")" in
        *"default"*);;
        *) rc-update add local ;;
    esac
    rc-service local restart

    # Start OpenVPN services
    if [[ -n $(json_get "openvpn") ]]; then
        while read -r line; do
            port="$(json_get "port" "$line")"
            srv="${port##*/}${port%%/*}"
            rc-update add "openvpn.$srv"
            rc-service "openvpn.$srv" start
        done < <(json_get "openvpn[]"); unset line
    fi
}

stop() {
    local service
    local teardown="$1"

    case "$(rc-service local status)" in
        *"started"*) rc-service local stop ;;
    esac
    rm -f /etc/local.d/obfs3proxy.{start,stop}
    rm -f /etc/local.d/wireguard.{start,stop}
    case "$(rc-update show | grep "local")" in
        *"default"*) rc-service local start ;;
    esac

    # Remove OpenVPN services
    while read -r service; do
        rc-service "$service" stop
        rc-update del "$service"
        [[ -z "$teardown" ]] || rm -f "/etc/init.d/$service"
    done < <(find /etc/init.d -name "openvpn.*" -printf "%f\n")
    unset service
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] <action> [args]

DESCRIPTION
    Manage all OpenVPN and Wireguard configs.

OPTIONS
    -f, --force       Overwrite existing configs
    -h, --help        Display this help message
        --no-color    Disable colorized output

ACTIONS
    down|teardown          Erase all VPN configs
    ex|example             Generate an example config
    fw|iptables            Generate iptables rules
    qr <iface> <client>    Generate qrcodes for wireguard client
    up|setup               Build all VPN configs

QUICK START

1. Create $HOME/.config/avf.conf
    - See "avf ex" for an example
2. Setup iptables
    - Run "avf fw >/etc/iptables/rules-save"
    - Optionally, modify as needed, read comments
    - Run "iptables-restore </etc/iptables/rules-save"
3. Run "avf up" to generate all VPN configs
4. Run "avf down" to start over

EOF
    exit "$1"
}

wg_gen_client() {
    local config="$1"
    local cidr="$(json_get "ip" "$config")"
    local dns="$(json_get "dns" "$config")"
    local endpoint="$(json_get "endpoint" "$config")"
    local file
    local iface="$2"
    local ip="$3"
    local name="$4"
    local port="$(json_get "port" "$config")"
    local priv
    local psk
    local pub
    local route
    local server="$endpoint:$port"
    local subnet
    local tmp="$name$port"

    file="/etc/wireguard/$iface/$tmp.conf"

    if [[ -f "$file" ]] && [[ -z $force ]]; then
        warn "Client $tmp already exists. Use --force to overwrite."
        return
    fi

    subinfo "Generating Wireguard client: $tmp"

    priv="$(wg genkey)"
    psk="$(wg genpsk)"
    pub="$(wg pubkey <<<"$priv")"
    subnet="$(busybox ipcalc -n "$cidr" | grep -ioPs "network.\K.+")"
    subnet+="/${cidr##*/}"

    cat >>"/etc/wireguard/$iface.conf" <<EOF

# $name
[Peer]
AllowedIPs = $ip/32
PresharedKey = $psk
PublicKey = $pub
EOF

    mkdir -p "/etc/wireguard/$iface"

    cat >"$file" <<EOF
[Interface]
Address = $ip/32
DNS = $dns
PrivateKey = $priv

[Peer]
AllowedIPs = 0.0.0.0/0
Endpoint = $server
PersistentKeepalive = 25
PresharedKey = $psk
PublicKey = $(
    grep -ioPs "PrivateKey\s*\=\s*\K.+" \
    "/etc/wireguard/$iface.conf" | wg pubkey
)
EOF

    if [[ -n $(json_get "routes" "$config") ]]; then
        file="/etc/wireguard/$iface/${name}${port}split.conf"
        cat >"$file" <<EOF
[Interface]
Address = $ip/32
DNS = $dns
PrivateKey = $priv

[Peer]
AllowedIPs = $subnet,$(json_get "routes|join(\",\")" "$config")
Endpoint = $server
PersistentKeepalive = 25
PresharedKey = $psk
PublicKey = $(
    grep -ioPs "PrivateKey\s*\=\s*\K.+" \
    "/etc/wireguard/$iface.conf" | wg pubkey
)
EOF
    fi

    chown -R root:root /etc/wireguard
    chmod -R u+rwX,go-rwx /etc/wireguard
}

wg_gen_server() {
    local config="$1"
    local iface="$2"
    local ip="$(json_get "ip" "$config")"
    local port="$(json_get "port" "$config")"
    local priv

    if [[ -f /etc/wireguard/$iface.conf ]] && [[ -z $force ]]; then
        warn "Server $iface already exists. Use --force to overwrite."
        return
    fi

    subinfo "Generating Wireguard server: $iface"

    priv="$(wg genkey)"

    cat >"/etc/wireguard/$iface.conf" <<EOF
[Interface]
Address = $ip
ListenPort = $port
PrivateKey = $priv
EOF

    chown -R root:root /etc/wireguard
    chmod -R u+rwX,go-rwx /etc/wireguard
}

wipe() {
    # Reset Wireguard
    rm -f -r /etc/wireguard/wg*

    # Reset OpenVPN
    rm -f -r /etc/openvpn/{clients,ipp,ta} /etc/openvpn/*.conf
    yes | certify -e -p /etc/openvpn/pki
}

declare -a args
unset force help
color="true"
conf="$HOME/.config/avf.conf"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-f"|"--force") force="true" ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage "$?" ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("/etc/local.d")
deps+=("awk")
deps+=("busybox")
deps+=("certify")
deps+=("grep")
deps+=("jq")
# deps+=("obfsproxy")
deps+=("qrencode")
deps+=("wg")
deps+=("wg-quick")
check_deps

# Check for valid params
case "$1" in
    "ex"|"example") [[ $# -eq 1 ]] || usage 1 ;;
    "qr") [[ $# -eq 3 ]] || usage 1 ;;
    *) [[ $# -eq 1 ]] || usage 1 ;;
esac
case "$1" in
    "ex"|"example") ;;
    *) [[ -f $conf ]] || usage 2 ;;
esac

case "$1" in
    "down"|"teardown") stop true; wipe ;;
    "ex"|"example") example ;;
    "fw"|"iptables") gen_iptables ;;
    "qr") qr "$2" "$3" ;;
    "up"|"setup") stop; rebuild; start ;;
    *) usage 3 ;;
esac
